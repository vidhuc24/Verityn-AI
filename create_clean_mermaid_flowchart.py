#!/usr/bin/env python3
"""
Create Verityn AI Application Flowchart (Clean Mermaid Version)
Generates a Mermaid flowchart without emojis or special characters for compatibility.
"""

def create_clean_mermaid_flowchart():
    mermaid_code = """
graph TB
    %% Title
    subgraph "VERITYN AI - MULTI-AGENT DOCUMENT CHAT SYSTEM"
    
    %% User Interface Layer
    subgraph "User Interface Layer"
        A[User/Auditor<br/>‚Ä¢ Upload Document<br/>‚Ä¢ Ask Questions<br/>‚Ä¢ View Results]
        B[Next.js Frontend<br/>‚Ä¢ Document Upload<br/>‚Ä¢ Chat Interface<br/>‚Ä¢ Smart Questions<br/>‚Ä¢ Progress Feedback]
        C[FastAPI Backend<br/>‚Ä¢ Multi-Agent Orchestration<br/>‚Ä¢ API Endpoints<br/>‚Ä¢ Error Handling]
    end
    
    %% Multi-Agent Workflow Layer
    subgraph "Multi-Agent Workflow"
        D[Document Processing Agent<br/>‚Ä¢ Extract Text<br/>‚Ä¢ Chunk Content<br/>‚Ä¢ Generate Embeddings]
        E[Classification Agent<br/>‚Ä¢ Identify Type<br/>‚Ä¢ SOX Controls<br/>‚Ä¢ Risk Level<br/>‚Ä¢ Compliance Framework]
        F[Question Analysis Agent<br/>‚Ä¢ Understand Intent<br/>‚Ä¢ Optimize Query<br/>‚Ä¢ Context Awareness]
        G[Context Retrieval Agent<br/>‚Ä¢ Hybrid Search<br/>‚Ä¢ Query Expansion<br/>‚Ä¢ Multi-Hop<br/>‚Ä¢ Metadata Filtering]
        H[Response Synthesis Agent<br/>‚Ä¢ Combine Context<br/>‚Ä¢ Generate Response<br/>‚Ä¢ Source Citations]
        I[Compliance Analyzer Agent<br/>‚Ä¢ Risk Assessment<br/>‚Ä¢ Compliance Validation<br/>‚Ä¢ Control Mapping]
    end
    
    %% Advanced Retrieval Layer
    subgraph "Advanced Retrieval Techniques"
        J1[Hybrid Search<br/>Semantic + Keyword]
        J2[Query Expansion<br/>Audit Terminology]
        J3[Multi-Hop Retrieval<br/>Comprehensive Analysis]
        J4[Metadata Filtering<br/>Type, Framework, Risk]
        J5[Conversational Retrieval<br/>Context Preservation]
        J6[Classification-Enhanced<br/>Type-Specific Optimization]
        J7[Ensemble Retrieval<br/>Multiple Techniques]
    end
    
    %% Data Processing Layer
    subgraph "Data Processing Layer"
        K[Document Chunking<br/>‚Ä¢ 1000-char chunks<br/>‚Ä¢ 250-char overlap<br/>‚Ä¢ Preserve Structure]
        L[Embedding Generation<br/>‚Ä¢ OpenAI text-embedding-3-small<br/>‚Ä¢ Semantic Vectors<br/>‚Ä¢ High Quality]
        M[Vector Database - Qdrant<br/>‚Ä¢ Similarity Search<br/>‚Ä¢ Fast Retrieval<br/>‚Ä¢ Metadata Storage]
        N[Metadata Storage<br/>‚Ä¢ Document Type<br/>‚Ä¢ Compliance Framework<br/>‚Ä¢ Risk Level<br/>‚Ä¢ Company Info]
    end
    
    %% LLM Integration
    subgraph "LLM Integration"
        O[OpenAI GPT-4<br/>‚Ä¢ Superior Reasoning<br/>‚Ä¢ Compliance Analysis<br/>‚Ä¢ Response Generation<br/>‚Ä¢ Context Awareness]
    end
    
    %% External Integrations
    subgraph "External Integrations"
        P[Tavily API<br/>‚Ä¢ Real-time Regulatory Guidance<br/>‚Ä¢ Current Compliance Info<br/>‚Ä¢ Best Practices<br/>‚Ä¢ Framework Updates]
    end
    
    %% Evaluation & Monitoring
    subgraph "Evaluation & Monitoring"
        R[RAGAS Evaluation<br/>‚Ä¢ Faithfulness: 0.850<br/>‚Ä¢ Relevancy: 0.780<br/>‚Ä¢ Precision: 0.820<br/>‚Ä¢ Recall: 0.750]
        S[Performance Monitoring - LangSmith<br/>‚Ä¢ Real-time Metrics<br/>‚Ä¢ Performance Tracking<br/>‚Ä¢ Debugging<br/>‚Ä¢ Optimization]
        T[Quality Assessment<br/>‚Ä¢ Success Rate: 100%<br/>‚Ä¢ Response Length: 1,478-1,651 chars<br/>‚Ä¢ Execution Time: 28-36s]
        U[Business Impact<br/>‚Ä¢ Classification Accuracy: 95%+<br/>‚Ä¢ Compliance Relevance: 90%+<br/>‚Ä¢ Risk Identification: 85%+<br/>‚Ä¢ Production Ready]
    end
    
    %% Performance Metrics Summary
    subgraph "Performance Metrics Summary"
        V[Key Achievements<br/>‚Ä¢ 100% Success Rate (Both Systems)<br/>‚Ä¢ 12% Response Quality Improvement<br/>‚Ä¢ Production-Ready Stability<br/>‚Ä¢ Quality-Focused Approach<br/>‚Ä¢ Comprehensive Evaluation]
    end
    
    end
    
    %% Flow Connections
    A --> B
    B --> C
    C --> D
    D --> E
    E --> F
    F --> G
    G --> H
    H --> I
    G --> J1
    G --> J2
    G --> J3
    G --> J4
    G --> J5
    G --> J6
    G --> J7
    D --> K
    K --> L
    L --> M
    M --> N
    H --> O
    I --> O
    O --> P
    P --> H
    H --> R
    I --> S
    H --> T
    I --> U
    R --> V
    S --> V
    T --> V
    U --> V
    
    %% Styling
    classDef userInterface fill:#E3F2FD,stroke:#1976D2,stroke-width:3px,color:#000
    classDef backend fill:#E8F5E8,stroke:#388E3C,stroke-width:3px,color:#000
    classDef agent fill:#FFF3E0,stroke:#F57C00,stroke-width:3px,color:#000
    classDef retrieval fill:#FFF8E1,stroke:#FFA000,stroke-width:3px,color:#000
    classDef database fill:#FCE4EC,stroke:#C2185B,stroke-width:3px,color:#000
    classDef external fill:#F1F8E9,stroke:#689F38,stroke-width:3px,color:#000
    classDef evaluation fill:#F9FBE7,stroke:#AFB42B,stroke-width:3px,color:#000
    classDef metrics fill:#E0F2F1,stroke:#00695C,stroke-width:3px,color:#000
    
    class A,B userInterface
    class C,D,E,F,G,H,I,K,L backend
    class J1,J2,J3,J4,J5,J6,J7 retrieval
    class M,N database
    class O,P external
    class R,S,T,U evaluation
    class V metrics
    """
    
    return mermaid_code

def create_simple_clean_flowchart():
    mermaid_code = """
graph TD
    %% User Interface Layer
    A[User/Auditor] --> B[Next.js Frontend]
    B --> C[FastAPI Backend]
    
    %% Multi-Agent Workflow
    C --> D[Document Processing Agent]
    D --> E[Classification Agent]
    E --> F[Question Analysis Agent]
    F --> G[Context Retrieval Agent]
    G --> H[Response Synthesis Agent]
    H --> I[Compliance Analyzer Agent]
    
    %% Advanced Retrieval Techniques
    G --> J1[Hybrid Search]
    G --> J2[Query Expansion]
    G --> J3[Multi-Hop Retrieval]
    G --> J4[Metadata Filtering]
    G --> J5[Conversational Retrieval]
    G --> J6[Classification-Enhanced]
    G --> J7[Ensemble Retrieval]
    
    %% Data Processing Layer
    D --> K[Document Chunking]
    K --> L[Embedding Generation]
    L --> M[Vector Database - Qdrant]
    M --> N[Metadata Storage]
    
    %% LLM Integration
    H --> O[OpenAI GPT-4]
    I --> O
    
    %% External Integrations
    O --> P[Tavily API]
    P --> Q[Regulatory Guidance]
    
    %% Evaluation & Monitoring
    H --> R[RAGAS Evaluation]
    I --> S[Performance Monitoring - LangSmith]
    H --> T[Quality Assessment]
    I --> U[Business Impact]
    
    %% Response Flow
    O --> V[Generate Response]
    V --> W[Return to Frontend]
    W --> X[Display Results]
    
    %% Styling
    classDef userInterface fill:#E3F2FD,stroke:#1976D2,stroke-width:2px
    classDef backend fill:#E8F5E8,stroke:#388E3C,stroke-width:2px
    classDef agent fill:#FFF3E0,stroke:#F57C00,stroke-width:2px
    classDef database fill:#FCE4EC,stroke:#C2185B,stroke-width:2px
    classDef external fill:#F1F8E9,stroke:#689F38,stroke-width:2px
    classDef evaluation fill:#F9FBE7,stroke:#AFB42B,stroke-width:2px
    
    class A,B userInterface
    class C,D,E,F,G,H,I,K,L backend
    class J1,J2,J3,J4,J5,J6,J7 agent
    class M,N database
    class O,P,Q external
    class R,S,T,U evaluation
    """
    
    return mermaid_code

if __name__ == "__main__":
    # Create clean detailed version
    detailed_mermaid = create_clean_mermaid_flowchart()
    with open('verityn_ai_flowchart_clean_detailed.mmd', 'w') as f:
        f.write(detailed_mermaid)
    
    # Create clean simple version
    simple_mermaid = create_simple_clean_flowchart()
    with open('verityn_ai_flowchart_clean_simple.mmd', 'w') as f:
        f.write(simple_mermaid)
    
    print("‚úÖ Clean Mermaid flowcharts generated successfully!")
    print("üìÅ Files created:")
    print("   - verityn_ai_flowchart_clean_detailed.mmd")
    print("   - verityn_ai_flowchart_clean_simple.mmd")
    print("\nüí° These versions are compatible with mermaid.live!")
    print("   No emojis or special characters that cause parsing errors.")
    
    print("\nüìã Clean Detailed Mermaid Code:")
    print("=" * 50)
    print(detailed_mermaid)
    
    print("\nüìã Clean Simple Mermaid Code:")
    print("=" * 50)
    print(simple_mermaid) 